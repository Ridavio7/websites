package main

import (
	"fmt"
	"math"
	"sync"
)

/*
	Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(22+32+42….)
	с использованием конкурентных вычислений
*/

func main() {
	task3Channel()
	task3Mutex()
}

func task3Channel() {
	array := []float64{2, 4, 6, 8, 10}      // массив
	chann := make(chan float64, len(array)) // создаем буферизированный канал с емкостью, равной длинне массива
	var res float64                         // результат, в который записываются данные
	var wg sync.WaitGroup                   // wg позволяет определить группу горутин, которые должны выполняться вместе как одна группа
	for _, a := range array {               // цикл по массиву
		wg.Add(1)            // прибавляем счетчик активных элементов
		go func(a float64) { // передаем гарутине элемент массива
			m := math.Pow(a, 2) // функция возведения в степень
			chann <- m          // вывод в канал данные
			wg.Done()           // сигнал, что элемент группы завершил свое выполнение
		}(a)
	}
	wg.Wait()    // метод, который ожидает завершения всех горутин из группы wg
	close(chann) // закрываем канал
	for a := range chann {
		res += a // считываем и складываем
	}
	fmt.Printf("Решение через каналы: %v\n", res) // выводим полученное значение
}

func task3Mutex() {
	array := []float64{2, 4, 6, 8, 10} // массив
	var res_first float64              // результат, в который записываются данные
	var res_second float64             // переменная для записи промежуточного результата
	var wg sync.WaitGroup              // wg позволяет определить группу горутин, которые должны выполняться вместе как одна группа
	var mutex sync.Mutex               // С помощью мьютексов можно ограничить доступ к переменной таким образом, чтобы только одна горутина имела к ней монопольный доступ в один момент времени
	for _, a := range array {          // цикл по массиву
		wg.Add(1)            // прибавляем счетчик активных элементов
		go func(a float64) { // передаем гарутине элемент массива
			res_second = math.Pow(a, 2)        // функция возведения в степень
			mutex.Lock()                       // блокируем доступ к переменной res_first
			res_first = res_first + res_second // прибавляем к res_first квадрат числа
			mutex.Unlock()                     // снимаем блокировку к переменной res_first
			wg.Done()                          // сигнал, что элемент группы завершил свое выполнение
		}(a)
	}
	wg.Wait()                                           // метод, который ожидает завершения всех горутин из группы wg
	fmt.Printf("Решение через мьютексы: %v", res_first) // выводим полученное значение
}
