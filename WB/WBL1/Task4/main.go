package main

import (
	"fmt"
	"math/rand"
	"os"
	"os/signal"
	"time"
)

/*
	Реализовать постоянную запись данных в канал (главный поток). Реализовать набор из N воркеров,
	которые читают произвольные данные из канала и выводят в stdout. Необходима возможность выбора количества воркеров при старте.
	Программа должна завершаться по нажатию Ctrl+C. Выбрать и обосновать способ завершения работы всех воркеров.
*/

func main() {
	fmt.Println("Количество воркеров:")
	var N int
	fmt.Scanf("%d\n", &N)   // сканирование количества воркеров
	intCh := make(chan int) // создаем канал

	c := make(chan os.Signal, 1)   // создаем канал для передачи сигнала завершения
	signal.Notify(c, os.Interrupt) // Notify отключает поведение по умолчанию для SIGINT (приводят к завершению программы)
	//и вместо этого доставляет по зарегистрированным каналам
	go func() {
		<-c                   // сигнал о нажатии пользователем ^C
		fmt.Println("End...") // сообщение о завершении работы
		os.Exit(0)            // выход из программы
	}()

	for i := 0; i < N; i++ { // создаем воркеров
		go worker(i, intCh)
	}

	// постоянная запись данных в канал (главный поток)
	for {
		intCh <- rand.Intn(1000) // посылаем рандомное число
		time.Sleep(time.Second)
	}
}

func worker(wNum int, getnum <-chan int) {
	for {
		number := <-getnum // воркер берет значение из канала
		fmt.Printf("Worker #%d get number: %d\n", wNum, number)
	}
}
